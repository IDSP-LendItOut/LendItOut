generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                           String             @id @default(auto()) @map("_id") @db.ObjectId
  email                        String             @unique
  name                         String
  createdAt                    DateTime           @default(now())
  password                     String?
  banner                       String?
  profilePic                   String?
  passwordResetCode            String?
  passwordResetCodeExpirations DateTime?
  listings                     Listing[]
  messagesSent                 Message[]          @relation("MessageSender")
  ReviewOnListing              ReviewOnListing[]
  reviewsGiven                 ReviewOnUser[]     @relation("Reviewer")
  reviewsReceived              ReviewOnUser[]     @relation("Target")
  conversations                UserConversation[]
}

model UserConversation {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  userId         String       @db.ObjectId
  conversationId String       @db.ObjectId
  user           User         @relation(fields: [userId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}

model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String    @unique
  type     String
  listings Listing[]

  @@unique([name, type])
}

model Listing {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  type           ListingType
  group          Groups?
  salePrice      Float?
  rentalPrice    Float?
  rentalDuration RentalDuration?
  available      Boolean           @default(true)
  condition      Condition
  userId         String?           @db.ObjectId
  createdAt      DateTime          @default(now())
  user           User?             @relation(fields: [userId], references: [id])
  media          Media[]
  reviews        ReviewOnListing[]
  conversations  Conversation[]
  categoryId     String?           @db.ObjectId
  category       Category?         @relation(fields: [categoryId], references: [id])
}

model ReviewOnUser {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  reviewerId String   @db.ObjectId
  targetId   String   @db.ObjectId
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  reviewer   User     @relation("Reviewer", fields: [reviewerId], references: [id])
  target     User     @relation("Target", fields: [targetId], references: [id])
}

model ReviewOnListing {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  reviewerId String   @db.ObjectId
  listingId  String   @db.ObjectId
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  listing    Listing  @relation(fields: [listingId], references: [id])
  reviewer   User     @relation(fields: [reviewerId], references: [id])
}

model Media {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  type      MediaType
  listingId String    @db.ObjectId
  listing   Listing   @relation(fields: [listingId], references: [id])
}

model Conversation {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  listingId    String             @db.ObjectId
  createdAt    DateTime           @default(now())
  listing      Listing            @relation(fields: [listingId], references: [id])
  messages     Message[]
  participants UserConversation[]
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  text           String
  createdAt      DateTime     @default(now())
  senderId       String       @db.ObjectId
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User         @relation("MessageSender", fields: [senderId], references: [id])
}

enum ListingType {
  RENT
  PURCHASE
}

enum MediaType {
  IMAGE
  VIDEO
}

enum Groups {
  ELECTRONICS
  FASHION
  HOME
  FURNITURE
  BOOKS
  BABY
  CLOTHING
  OFFICE
  SPORTS
  TOOLS
  TOYS
  BEAUTY
}

enum Condition {
  BAD
  ADEQUATE
  GOOD
  GREAT
  NEW
}

enum RentalDuration {
  HOUR
  DAY
  WEEK
  MONTH
  YEAR
}
