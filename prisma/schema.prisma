generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                           Int               @id @default(autoincrement())
  email                        String            @unique
  name                         String
  createdAt                    DateTime          @default(now())
  password                     String?
  banner                       String?
  profilePic                   String?
  passwordResetCode            String?
  passwordResetCodeExpirations DateTime?
  listings                     Listing[]
  messagesSent                 Message[]         @relation("MessageSender")
  ReviewOnListing              ReviewOnListing[]
  reviewsGiven                 ReviewOnUser[]    @relation("Reviewer")
  reviewsReceived              ReviewOnUser[]    @relation("Target")
  conversations                Conversation[]    @relation("ConversationParticipants")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  type     String
  listings Listing[]

  @@unique([name, type])
}

model Listing {
  id             Int               @id @default(autoincrement())
  title          String
  description    String
  type           ListingType
  group          Groups
  salePrice      Float?
  rentalPrice    Float?
  rentalDuration RentalDuration?
  available      Boolean           @default(true)
  condition      Condition
  userId         Int
  createdAt      DateTime          @default(now())
  user           User              @relation(fields: [userId], references: [id])
  media          Media[]
  reviews        ReviewOnListing[]
  conversations  Conversation[]
  categoryId     Int?
  category       Category?         @relation(fields: [categoryId], references: [id])
}

model ReviewOnUser {
  id         Int      @id @default(autoincrement())
  reviewerId Int
  targetId   Int
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  reviewer   User     @relation("Reviewer", fields: [reviewerId], references: [id])
  target     User     @relation("Target", fields: [targetId], references: [id])
}

model ReviewOnListing {
  id         Int      @id @default(autoincrement())
  reviewerId Int
  listingId  Int
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  listing    Listing  @relation(fields: [listingId], references: [id])
  reviewer   User     @relation(fields: [reviewerId], references: [id])
}

model Media {
  id        Int       @id @default(autoincrement())
  url       String
  type      MediaType
  listingId Int
  listing   Listing   @relation(fields: [listingId], references: [id])
}

model Conversation {
  id           Int       @id @default(autoincrement())
  listingId    Int
  createdAt    DateTime  @default(now())
  listing      Listing   @relation(fields: [listingId], references: [id])
  messages     Message[]
  participants User[]    @relation("ConversationParticipants")
}

model Message {
  id             Int          @id @default(autoincrement())
  text           String
  createdAt      DateTime     @default(now())
  senderId       Int
  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User         @relation("MessageSender", fields: [senderId], references: [id])
}

enum ListingType {
  RENT
  PURCHASE
}

enum MediaType {
  IMAGE
  VIDEO
}

enum Groups {
  ELECTRONICS
  FASHION
  HOME
  FURNITURE
  BOOKS
  BABY
  CLOTHING
  OFFICE
  SPORTS
  TOOLS
  TOYS
  BEAUTY
}

enum Condition {
  BAD
  ADEQUATE
  GOOD
  GREAT
  NEW
}

enum RentalDuration {
  HOUR
  DAY
  WEEK
  MONTH
  YEAR
}
